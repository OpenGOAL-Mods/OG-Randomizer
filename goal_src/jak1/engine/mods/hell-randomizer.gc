;;-*-Lisp-*-
(in-package goal)
;; name: hell-randomizer.gc
;; name in dgo: hell-randomizer
;; dgos: GAME, ENGINE

#|  Modifiers =========== 
  1. pacifist - attacks do nothing
  2. flipped-sticks - Left & Right sticks are flipped

|#

(defconstant NUM_MODIFIERS 2)

(deftype modifier (structure)
  (
  (on-func (function none))
  (off-func (function none))
  (name string)
  (index int)
  (used? symbol)
  (active? symbol)
  )
)

(deftype modifier-info (structure)
  ((modifiers modifier NUM_MODIFIERS :inline :offset-assert 0)
   )
  ) 

(define *modifier-info* (new 'static 'modifier-info))

(defun set-modifier-param ((self modifier) (name string) (on-func (function none)) (off-func (function none)) (index int))
  (if (> index NUM_MODIFIERS)
    (return #f)
  )
  (set! (-> self name) (new 'global 'string 15 (the-as string #f)) );; now you can have at most 128 characters of a string, but you are eating away at global memory
  (copy-string<-string (-> self name) name)
  (set! (-> self on-func) on-func)
  (set! (-> self off-func) off-func)
  (set! (-> self index) index)
  (set! (-> self active?) #f)
  ;;set active to false as everything will be false on boot
  (none)
)

(defun set-up-modifier-info ()
"This function runs on startup, and it checks if modifier-info has been setup. If modifier-info is not set up then it sets it up"
  (if (= (-> *modifier-info* modifiers 1 name) 0)
    (begin
    ;; Modifier info has not been setup so lets set it up
    ;;setup functions with set-modifier-param modifier name on-func off-func index
    (set-modifier-param (-> *modifier-info* modifiers 1) 
      "pacifist" 
      (lambda () (set! (-> *TARGET-bank* punch-radius) (meters -1.0))(set! (-> *TARGET-bank* spin-radius) (meters -1.0))(set! (-> *TARGET-bank* flop-radius) (meters -1.0))(set! (-> *TARGET-bank* uppercut-radius) (meters -1.0)) (none))
      (lambda () (set! (-> *TARGET-bank* punch-radius) (meters 1.3))(set! (-> *TARGET-bank* spin-radius) (meters 2.2))(set! (-> *TARGET-bank* flop-radius) (meters 1.4))(set! (-> *TARGET-bank* uppercut-radius) (meters 1)) (none))
      1
    )
    (set-modifier-param (-> *modifier-info* modifiers 1) 
      "flipped-sticks" 
      (the-as (function none) #f)
      (the-as (function none) #f)
      2
    )
    )
    ;; Modifier info has been setup lets just return
    (return #f)
  )
  (none)
)



;;takes in the name of a modifier and outputs it's active? value
(defun modifier-is-active? ((input string))

  (dotimes (i NUM_MODIFIERS)
    (if (string= input (-> *modifier-info* modifiers i name))
      ;; match!
      (return (-> *modifier-info* modifiers i active?))
    )
  )
  ;;No matching modifier found, return #f to avoid problems
  #f
)

;;takes in the name of a modifier and outputs it's index
(defun modifier-by-name ((input string))

  (dotimes (i NUM_MODIFIERS)
    (if (string= input (-> *modifier-info* modifiers i name))
      ;; match!
      (return i)
    )
  )
  ;;No matching modifier found, return 0 to avoid problems
  0
)

(defun hell-run-each-frame ()
;;Hell Randomizer stuff that needs to run constantly
  (when (-> *hell-settings* hell-randomizer?)
      
      #| 
        Here we call any functions that need to continually run for an active modifier
      |#

  )
(none)
)

(defun modifierCloser ((mod int)) ;;Mod = 0 -> Toggle off all , Mod 1+ -> Toggle off specified modifier (1 -> no. of modifiers)

  ;;Mod 0 -> toggle off all modifiers (randomizer)
  #| 
    Here a loop will toggle off every modifier.
  |#

  ;;Toggle off specific modifier
  (when (and (> mod 0) (<= mod NUM_MODIFIERS))
    (set! (-> *modifier-info* modifiers mod active?) #f)
    (if (!= (-> *modifier-info* modifiers mod off-func) #f) (-> *modifier-info* modifiers mod off-func))
  )

(none)
)

(defun modifierBank ((mod int))
;;Selects one or more new modifiers to be applied

  #| 
    if statement to ensure 1 <= mod <= size of modifiersArray
  |#
  
  ;;Randomly select one or more modifiers
  #| 
    Here a loop will randomly select the required number of new modifiers
    from a list of so-far un-used modifiers, and add them to an in-use list.
    Each time a modifier is selected, it is then immediately removed from the un-used list.
  |#
  
(none)
)

(defun modifierOpener ((mod int))
;;Enables/activates modifiers

  (when (and (> mod 0) (<= mod NUM_MODIFIERS))
    (set! (-> *modifier-info* modifiers mod active?) #t)
    (if (!= (-> *modifier-info* modifiers mod on-func) #f) (-> *modifier-info* modifiers mod on-func))
  )
  ;;Modify appropriate values/variables
(none)
)

;;Reads settings to enact user choices from modifier-toggle-options. For testing only
(defun enact-modifier-toggles ()
  (when (-> *hell-settings* hell-randomizer?)
    (if (-> *hell-settings* pacifist?) (modifierOpener (modifier-by-name "pacifist")) (modifierCloser (modifier-by-name "pacifist")))
    (if (-> *hell-settings* flipped-sticks?) (modifierOpener (modifier-by-name "flipped-sticks")) (modifierCloser (modifier-by-name "flipped-sticks")))
  )
(none)
)

(defun modifierManager () ;;To be called on cell-grab (randomizer), or on demand (crowd-control)

  ;;Randomizer
  (when (-> *hell-settings* hell-randomizer?) 

    (modifierCloser 0)

    (modifierBank 1)
    
  )

  ;;Crowd-control

(none)
)